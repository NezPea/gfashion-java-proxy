swagger: "2.0"
info:
  description: "GFashion"
  version: "1.0.0"
  title: "GFashion"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "gtv1.org"
basePath: "/v1"
tags:
  - name: "gfashion"
    description: "Everything about GFashion"
    externalDocs:
      description: "Find out more"
      url: "http://swagger.io"
  - name: "store"
    description: "Access to GFashion Store orders"
  - name: "customer"
    description: "Operations about customer"
  - name: "product"
    description: "Recommended product"
  - name: "designer"
    description: "Recommended desginer"
schemes:
  - "https"
  - "http"
paths:
  /product:
    post:
      tags:
        - "product"
      summary: "Add a new product to the store"
      description: ""
      operationId: "addProduct"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Product object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Product"
      responses:
        "405":
          description: "Invalid input"
      security:
        - gfashionstore_auth:
            - "write:products"
            - "read:products"
    put:
      tags:
        - "product"
      summary: "Update an existing product"
      description: ""
      operationId: "updateProduct"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Product object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Product"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Product not found"
        "405":
          description: "Validation exception"
      security:
        - gfashionstore_auth:
            - "write:products"
            - "read:products"
  /product/search:
    get:
      tags:
        - "product"
      summary: "Searches Products by given query string"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "searchProducts"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "status"
          in: "query"
          description: "Query string that need to be considered for filter(TBC)"
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product"
        "400":
          description: "Invalid status value"
      security:
        - gfashionstore_auth:
            - "write:products"
            - "read:products"
  /product/{productId}:
    get:
      tags:
        - "product"
      summary: "Find product by ID"
      description: "Returns a single product"
      operationId: "getProdutById"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "productId"
          in: "path"
          description: "ID of product to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Product"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Product not found"
      security:
        - api_key: []
    post:
      tags:
        - "product"
      summary: "Updates a product in the store with form data"
      description: ""
      operationId: "updateProductWithForm"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "productId"
          in: "path"
          description: "ID of product that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - name: "name"
          in: "formData"
          description: "Updated name of the product"
          required: false
          type: "string"
        - name: "status"
          in: "formData"
          description: "Updated status of the product"
          required: false
          type: "string"
      responses:
        "405":
          description: "Invalid input"
      security:
        - gfashionstore_auth:
            - "write:products"
            - "read:products"
    delete:
      tags:
        - "product"
      summary: "Deletes a product"
      description: ""
      operationId: "deleteProduct"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "api_key"
          in: "header"
          required: false
          type: "string"
        - name: "productId"
          in: "path"
          description: "Product id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Product not found"
      security:
        - gfashionstore_auth:
            - "write:products"
            - "read:products"
  /product/{productId}/uploadImage:
    post:
      tags:
        - "product"
      summary: "uploads an image"
      description: ""
      operationId: "uploadProductFile"
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - name: "productId"
          in: "path"
          description: "ID of product to update"
          required: true
          type: "integer"
          format: "int64"
        - name: "additionalMetadata"
          in: "formData"
          description: "Additional data to pass to server"
          required: false
          type: "string"
        - name: "file"
          in: "formData"
          description: "file to upload"
          required: false
          type: "file"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
        - gfashionstore_auth:
            - "write:products"
            - "read:products"

  /store/order:
    post:
      tags:
        - "store"
      summary: "Place an order for a product"
      description: ""
      operationId: "placeOrder"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "order placed for purchasing the product"
          required: true
          schema:
            $ref: "#/definitions/Order"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid Order"
  /store/order/{orderId}:
    get:
      tags:
        - "store"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "orderId"
          in: "path"
          description: "ID of product that needs to be fetched"
          required: true
          type: "integer"
          maximum: 10.0
          minimum: 1.0
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
    delete:
      tags:
        - "store"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "orderId"
          in: "path"
          description: "ID of the order that needs to be deleted"
          required: true
          type: "integer"
          minimum: 1.0
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
  /customer:
    post:
      tags:
        - "customer"
      summary: "Create customer"
      description: "This can only be done by the logged in customer."
      operationId: "createCustomer"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created customer object"
          required: true
          schema:
            $ref: "#/definitions/Customer"
      responses:
        default:
          description: "successful operation"
  /customer/createWithArray:
    post:
      tags:
        - "customer"
      summary: "Creates list of customers with given input array"
      description: ""
      operationId: "createCustomersWithArrayInput"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "List of customer object"
          required: true
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Customer"
      responses:
        default:
          description: "successful operation"
  /customer/createWithList:
    post:
      tags:
        - "customer"
      summary: "Creates list of customers with given input array"
      description: ""
      operationId: "createCustomersWithListInput"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "List of customer object"
          required: true
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Customer"
      responses:
        default:
          description: "successful operation"
  /customer/login:
    get:
      tags:
        - "customer"
      summary: "Logs customer into the system"
      description: ""
      operationId: "loginCustomer"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "username"
          in: "query"
          description: "The user name for login"
          required: true
          type: "string"
        - name: "password"
          in: "query"
          description: "The password for login in clear text"
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the customer"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /customer/logout:
    get:
      tags:
        - "customer"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutCustomer"
      produces:
        - "application/xml"
        - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /customer/{username}:
    get:
      tags:
        - "customer"
      summary: "Get customer by user name"
      description: ""
      operationId: "getCustomerByName"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "The name that needs to be fetched. Use customer1 for testing. "
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Customer"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "Customer not found"
    put:
      tags:
        - "customer"
      summary: "Updated customer"
      description: "This can only be done by the logged in customer."
      operationId: "updateCustomer"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "name that need to be updated"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Updated customer object"
          required: true
          schema:
            $ref: "#/definitions/Customer"
      responses:
        "400":
          description: "Invalid customer supplied"
        "404":
          description: "Customer not found"
    delete:
      tags:
        - "customer"
      summary: "Delete customer"
      description: "This can only be done by the logged in customer."
      operationId: "deleteCustomer"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "The name that needs to be deleted"
          required: true
          type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "Customer not found"
  /designer:
    post:
      tags:
        - "designer"
      summary: "Add a new designer to the store"
      description: ""
      operationId: "adddesigner"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "designer object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Designer"
      responses:
        "405":
          description: "Invalid input"
      security:
        - gfashionstore_auth:
            - "write:designers"
            - "read:designers"
    put:
      tags:
        - "designer"
      summary: "Update an existing designer"
      description: ""
      operationId: "updatedesigner"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "designer object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Designer"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "designer not found"
        "405":
          description: "Validation exception"
      security:
        - gfashionstore_auth:
            - "write:designers"
            - "read:designers"
  /designer/search:
    get:
      tags:
        - "designer"
      summary: "Searches designers by given query string"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "searchdesigners"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "status"
          in: "query"
          description: "Query string that need to be considered for filter(TBC)"
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Designer"
        "400":
          description: "Invalid status value"
      security:
        - gfashionstore_auth:
            - "write:designers"
            - "read:designers"
  /designer/{designerId}:
    get:
      tags:
        - "designer"
      summary: "Find designer by ID"
      description: "Returns a single designer"
      operationId: "getDesignerById"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "designerId"
          in: "path"
          description: "ID of designer to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Designer"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "designer not found"
      security:
        - api_key: []
    post:
      tags:
        - "designer"
      summary: "Updates a designer in the store with form data"
      description: ""
      operationId: "updatedesignerWithForm"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "designerId"
          in: "path"
          description: "ID of designer that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - name: "name"
          in: "formData"
          description: "Updated name of the designer"
          required: false
          type: "string"
        - name: "status"
          in: "formData"
          description: "Updated status of the designer"
          required: false
          type: "string"
      responses:
        "405":
          description: "Invalid input"
      security:
        - gfashionstore_auth:
            - "write:designers"
            - "read:designers"
    delete:
      tags:
        - "designer"
      summary: "Deletes a designer"
      description: ""
      operationId: "deletedesigner"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "api_key"
          in: "header"
          required: false
          type: "string"
        - name: "designerId"
          in: "path"
          description: "designer id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "designer not found"
      security:
        - gfashionstore_auth:
            - "write:designers"
            - "read:designers"
  /designer/{designerId}/uploadImage:
    post:
      tags:
        - "designer"
      summary: "uploads an image"
      description: ""
      operationId: "uploadDesignerFile"
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - name: "designerId"
          in: "path"
          description: "ID of designer to update"
          required: true
          type: "integer"
          format: "int64"
        - name: "additionalMetadata"
          in: "formData"
          description: "Additional data to pass to server"
          required: false
          type: "string"
        - name: "file"
          in: "formData"
          description: "file to upload"
          required: false
          type: "file"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
        - gfashionstore_auth:
            - "write:designers"
            - "read:designers"
securityDefinitions:
  gfashionstore_auth:
    type: "oauth2"
    authorizationUrl: "http://gfashionstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:products: "modify products in your account"
      read:products: "read your products"
      write:designers: "modify designers in your account"
      read:designers: "read your designers"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      productId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
          - "placed"
          - "approved"
          - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  Customer:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "Customer Status"
    xml:
      name: "Customer"
  Designer:
    type: "object"
    required:
      - "name"
      - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      photoUrl:
        type: "string"
      status:
        type: "string"
        description: "product status in the store"
        enum:
          - "recommeded"
          - "pending"
          - "deleted"
    xml:
      name: "Designer"
  Product:
    type: "object"
    required:
      - "name"
      - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "glasses"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      status:
        type: "string"
        description: "product status in the store"
        enum:
          - "available"
          - "pending"
          - "sold"
    xml:
      name: "Product"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
